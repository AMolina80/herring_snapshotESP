aspect.ratio = 6/7,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 6/10,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 6/5,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 5/8,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 6/8,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 6/7,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 8/9,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 8/12,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 9/16,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 12),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 6), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
#width = 6, # Fixed width from previous examples
#height = 2, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
width = 16, # Fixed width from previous examples
height = 9, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 9/16,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 10), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
width = 16, # Fixed width from previous examples
height = 9, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
#####
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 9/16,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 12), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
width = 16, # Fixed width from previous examples
height = 9, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
# Save the plot
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 3/8
)
#short_name <- paste0(clean_title, "_", Sys.Date(), ".png")
short_name <- paste0(clean_title,".png")
plot_indicator_time_series <- function(data,
value_col,
facet_by = NULL,
plot_title = "",
x_label = "Year",
y_label = "Indicator Value",
x_axis_breaks = NA,
x_axis_limits = NA,
img_dir = ".",
base_font_size = 16,
include_axis_titles = TRUE,
set_aspect_ratio = FALSE,
line_color = "black",
point_color = "black",
hline_color = "darkgreen") {
# Input validation
if (!"Year" %in% names(data)) {
stop("Data frame must contain a 'Year' column.")
}
if (!value_col %in% names(data)) {
stop(paste0("Data frame must contain a '", value_col, "' column for indicator values."))
}
# Check for faceting column if specified
if (!is.null(facet_by) && !(facet_by %in% names(data))) {
stop(paste0("Data frame must contain a '", facet_by, "' column for faceting."))
}
# Calculate mean and standard deviation of the specified value column
# Use .data[[]] for dynamic column access within dplyr/ggplot contexts
mean_value <- mean(data[[value_col]], na.rm = TRUE)
sd_value <- sd(data[[value_col]], na.rm = TRUE)
# Generate a unique filename using the plot title and current date
# Sanitize title for filename
clean_title <- gsub("[^[:alnum:]]", "_", plot_title)
if (nchar(clean_title) == 0) {
clean_title <- value_col
}
#short_name <- paste0(clean_title, "_", Sys.Date(), ".png")
short_name <- paste0(clean_title,".png")
fname <- file.path(img_dir, short_name)
# Create the ggplot object
fig <- ggplot(data, aes(x = Year, y = .data[[value_col]])) + # Use .data[[]] for dynamic y aesthetic
geom_hline(yintercept = mean_value + sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value - sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value,
color = hline_color,
linetype = "dotted",
size = 0.8) +
geom_line(color = line_color, size = 1) +
geom_point(color = point_color, size = 2) +
labs(title = plot_title,
x = x_label,
y = y_label) +
theme_classic(base_size = base_font_size) +
theme(
plot.title = element_text(hjust = 0.5), # Center the title
axis.text.x = element_text(angle = 30, hjust = 1), # Rotate x-axis labels
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = NA) # Ensure panel is also transparent
)
# Add faceting if a column is specified
if (!is.null(facet_by)) {
fig <- fig + facet_wrap(as.formula(paste("~", facet_by)), scales = "free_y")
}
# Apply x-axis limits if specified
if (!is.na(x_axis_limits[1])) {
fig <- fig + coord_cartesian(xlim = x_axis_limits)
}
# Apply x-axis breaks if specified
if (!is.na(x_axis_breaks[1])) {
fig <- fig + scale_x_continuous(breaks = x_axis_breaks)
}
# Optionally remove axis titles
if (!include_axis_titles) {
fig <- fig + theme(axis.title = element_blank())
}
# Optionally set aspect ratio
if (set_aspect_ratio) {
fig <- fig + theme(aspect.ratio = 1/4)
}
# Save the plot
ggplot2::ggsave(fname,
plot = fig,
width = 6, # Fixed width from previous examples
height = 2, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
message(paste0("Plot saved as '", fname, "'"))
return(fname) # Return the full path of the saved file
}
# Save the plot
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 3/8
)
# Save output
plot_indicator_time_series(
data = winter_avg_nao,
value_col = "Winter_NAO",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 1/6
)
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "haddock_pred",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 3/8)
# Save output
plot_indicator_time_series(
data = winter_avg_nao,
value_col = "Winter_NAO",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 1/6
)
############################ use this
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 9/16,
legend.title = ggplot2::element_blank(),
axis.title.y = element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 12), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
############################ use this
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 9/16,
legend.title = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 12), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 1/4,
legend.title = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 12), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
width = 16, # Fixed width from previous examples
height = 9, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
# Save the plot
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 1/4
)
library(ggplot2)
# Save the plot
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 1/4
)
# Save the plot
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),
set_aspect_ratio = 1/4
)
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "haddock_pred",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 1/4)
# Save output
plot_indicator_time_series(
data = winter_avg_nao,
value_col = "Winter_NAO",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "05_images",
x_axis_limits = c(1980, 2025),set_aspect_ratio = 1/4
)
plt +
ggplot2::guides(shape = "none"#,
# color = ggplot2::guide_legend(ncol = 3)
) +
ggplot2::theme(aspect.ratio = 0.6,
# legend.position = "bottom",
# legend.direction = "horizontal",
# legend.box = "horizontal",
legend.title = ggplot2::element_blank(),
# legend.byrow = TRUE,
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2)) +
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))+
ggplot2::facet_wrap((herring_condition_data$EPU))
plt <- NEesp2::plot_condition(data = herring_condition_data,
var = 'Black sea bass')
