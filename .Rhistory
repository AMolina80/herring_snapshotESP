x_axis_limits = c(1980, 2025))
library(ggplot2)
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
#' #   select(Year, Estimate_Value)
#' #
#' # plot_indicator_time_series(
#' #   data = haddock_prepared_data,
#' #   value_col = "Estimate_Value", # Specify the correct column name
#' #   plot_title = "Haddock Predation Index (Generic)",
#' #   y_label = "Predation Estimate",
#' #   img_dir = tempdir(),
#' #   x_axis_limits = c(1960, 2005)
#' # )
plot_indicator_time_series <- function(data,
value_col,
plot_title = "",
x_label = "Year",
y_label = "Indicator Value",
x_axis_breaks = NA,
x_axis_limits = NA,
img_dir = ".",
base_font_size = 16,
include_axis_titles = TRUE,
set_aspect_ratio = FALSE,
line_color = "steelblue",
point_color = "darkblue",
hline_color = "darkgreen") {
# Input validation
if (!"Year" %in% names(data)) {
stop("Data frame must contain a 'Year' column.")
}
if (!value_col %in% names(data)) {
stop(paste0("Data frame must contain a '", value_col, "' column for indicator values."))
}
# Calculate mean and standard deviation of the specified value column
# Use .data[[]] for dynamic column access within dplyr/ggplot contexts
mean_value <- mean(data[[value_col]], na.rm = TRUE)
sd_value <- sd(data[[value_col]], na.rm = TRUE)
# Generate a unique filename using the plot title and current date
# Sanitize title for filename
clean_title <- gsub("[^[:alnum:]]", "_", plot_title)
if (nchar(clean_title) == 0) {
clean_title <- "value_col"
}
short_name <- paste0(clean_title, "_", Sys.Date(), ".png")
fname <- file.path(img_dir, short_name)
# Create the ggplot object
fig <- ggplot(data, aes(x = Year, y = .data[[value_col]])) + # Use .data[[]] for dynamic y aesthetic
geom_hline(yintercept = mean_value + sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value - sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value,
color = hline_color,
linetype = "dotted",
size = 0.8) +
geom_line(color = line_color, size = 1) +
geom_point(color = point_color, size = 2) +
labs(title = plot_title,
x = x_label,
y = y_label) +
theme_classic(base_size = base_font_size) +
theme(
plot.title = element_text(hjust = 0.5), # Center the title
axis.text.x = element_text(angle = 30, hjust = 1), # Rotate x-axis labels
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = NA) # Ensure panel is also transparent
)
# Apply x-axis limits if specified
if (!is.na(x_axis_limits[1])) {
fig <- fig + coord_cartesian(xlim = x_axis_limits)
}
# Apply x-axis breaks if specified
if (!is.na(x_axis_breaks[1])) {
fig <- fig + scale_x_continuous(breaks = x_axis_breaks)
}
# Optionally remove axis titles
if (!include_axis_titles) {
fig <- fig + theme(axis.title = element_blank())
}
# Optionally set aspect ratio
if (set_aspect_ratio) {
fig <- fig + theme(aspect.ratio = 1/4)
}
# Save the plot
ggplot2::ggsave(fname,
plot = fig,
width = 6, # Fixed width from previous examples
height = 2, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
message(paste0("Plot saved as '", fname, "'"))
return(fname) # Return the full path of the saved file
}
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
#' #   select(Year, Estimate_Value)
#' #
#' # plot_indicator_time_series(
#' #   data = haddock_prepared_data,
#' #   value_col = "Estimate_Value", # Specify the correct column name
#' #   plot_title = "Haddock Predation Index (Generic)",
#' #   y_label = "Predation Estimate",
#' #   img_dir = tempdir(),
#' #   x_axis_limits = c(1960, 2005)
#' # )
plot_indicator_time_series <- function(data,
value_col,
plot_title = "",
x_label = "Year",
y_label = "Indicator Value",
x_axis_breaks = NA,
x_axis_limits = NA,
img_dir = ".",
base_font_size = 16,
include_axis_titles = TRUE,
set_aspect_ratio = FALSE,
line_color = "steelblue",
point_color = "darkblue",
hline_color = "darkgreen") {
# Input validation
if (!"Year" %in% names(data)) {
stop("Data frame must contain a 'Year' column.")
}
if (!value_col %in% names(data)) {
stop(paste0("Data frame must contain a '", value_col, "' column for indicator values."))
}
# Calculate mean and standard deviation of the specified value column
# Use .data[[]] for dynamic column access within dplyr/ggplot contexts
mean_value <- mean(data[[value_col]], na.rm = TRUE)
sd_value <- sd(data[[value_col]], na.rm = TRUE)
# Generate a unique filename using the plot title and current date
# Sanitize title for filename
clean_title <- gsub("[^[:alnum:]]", "_", plot_title)
if (nchar(clean_title) == 0) {
clean_title <- value_col
}
short_name <- paste0(clean_title, "_", Sys.Date(), ".png")
fname <- file.path(img_dir, short_name)
# Create the ggplot object
fig <- ggplot(data, aes(x = Year, y = .data[[value_col]])) + # Use .data[[]] for dynamic y aesthetic
geom_hline(yintercept = mean_value + sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value - sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value,
color = hline_color,
linetype = "dotted",
size = 0.8) +
geom_line(color = line_color, size = 1) +
geom_point(color = point_color, size = 2) +
labs(title = plot_title,
x = x_label,
y = y_label) +
theme_classic(base_size = base_font_size) +
theme(
plot.title = element_text(hjust = 0.5), # Center the title
axis.text.x = element_text(angle = 30, hjust = 1), # Rotate x-axis labels
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = NA) # Ensure panel is also transparent
)
# Apply x-axis limits if specified
if (!is.na(x_axis_limits[1])) {
fig <- fig + coord_cartesian(xlim = x_axis_limits)
}
# Apply x-axis breaks if specified
if (!is.na(x_axis_breaks[1])) {
fig <- fig + scale_x_continuous(breaks = x_axis_breaks)
}
# Optionally remove axis titles
if (!include_axis_titles) {
fig <- fig + theme(axis.title = element_blank())
}
# Optionally set aspect ratio
if (set_aspect_ratio) {
fig <- fig + theme(aspect.ratio = 1/4)
}
# Save the plot
ggplot2::ggsave(fname,
plot = fig,
width = 6, # Fixed width from previous examples
height = 2, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
message(paste0("Plot saved as '", fname, "'"))
return(fname) # Return the full path of the saved file
}
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "Estimate_Value",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Provided by Micah dean (MADMF)
haddock_predation_index <-  read.csv(here::here('01_inputs/haddock_eat_herring_eggs_index.csv')) %>%
dplyr::rename(Year=YEAR,
Estimate_Value=log_est)
# Provided by Micah dean (MADMF)
haddock_predation_index <-  read.csv('01_inputs/haddock_eat_herring_eggs_index.csv') %>%
dplyr::rename(Year=YEAR,
Estimate_Value=log_est)
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "Estimate_Value",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Provided by Micah dean (MADMF)
haddock_predation_index <-  read.csv('01_inputs/haddock_eat_herring_eggs_index.csv') %>%
dplyr::rename(Year=YEAR,
haddock_pred=log_est)
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "Estimate_Value",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "haddock_pred",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
#' #   select(Year, Estimate_Value)
#' #
#' # plot_indicator_time_series(
#' #   data = haddock_prepared_data,
#' #   value_col = "Estimate_Value", # Specify the correct column name
#' #   plot_title = "Haddock Predation Index (Generic)",
#' #   y_label = "Predation Estimate",
#' #   img_dir = tempdir(),
#' #   x_axis_limits = c(1960, 2005)
#' # )
plot_indicator_time_series <- function(data,
value_col,
plot_title = "",
x_label = "Year",
y_label = "Indicator Value",
x_axis_breaks = NA,
x_axis_limits = NA,
img_dir = ".",
base_font_size = 16,
include_axis_titles = TRUE,
set_aspect_ratio = FALSE,
line_color = "black",
point_color = "black",
hline_color = "darkgreen") {
# Input validation
if (!"Year" %in% names(data)) {
stop("Data frame must contain a 'Year' column.")
}
if (!value_col %in% names(data)) {
stop(paste0("Data frame must contain a '", value_col, "' column for indicator values."))
}
# Calculate mean and standard deviation of the specified value column
# Use .data[[]] for dynamic column access within dplyr/ggplot contexts
mean_value <- mean(data[[value_col]], na.rm = TRUE)
sd_value <- sd(data[[value_col]], na.rm = TRUE)
# Generate a unique filename using the plot title and current date
# Sanitize title for filename
clean_title <- gsub("[^[:alnum:]]", "_", plot_title)
if (nchar(clean_title) == 0) {
clean_title <- value_col
}
short_name <- paste0(clean_title, "_", Sys.Date(), ".png")
fname <- file.path(img_dir, short_name)
# Create the ggplot object
fig <- ggplot(data, aes(x = Year, y = .data[[value_col]])) + # Use .data[[]] for dynamic y aesthetic
geom_hline(yintercept = mean_value + sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value - sd_value,
color = hline_color,
linetype = "solid",
size = 0.8) +
geom_hline(yintercept = mean_value,
color = hline_color,
linetype = "dotted",
size = 0.8) +
geom_line(color = line_color, size = 1) +
geom_point(color = point_color, size = 2) +
labs(title = plot_title,
x = x_label,
y = y_label) +
theme_classic(base_size = base_font_size) +
theme(
plot.title = element_text(hjust = 0.5), # Center the title
axis.text.x = element_text(angle = 30, hjust = 1), # Rotate x-axis labels
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = NA) # Ensure panel is also transparent
)
# Apply x-axis limits if specified
if (!is.na(x_axis_limits[1])) {
fig <- fig + coord_cartesian(xlim = x_axis_limits)
}
# Apply x-axis breaks if specified
if (!is.na(x_axis_breaks[1])) {
fig <- fig + scale_x_continuous(breaks = x_axis_breaks)
}
# Optionally remove axis titles
if (!include_axis_titles) {
fig <- fig + theme(axis.title = element_blank())
}
# Optionally set aspect ratio
if (set_aspect_ratio) {
fig <- fig + theme(aspect.ratio = 1/4)
}
# Save the plot
ggplot2::ggsave(fname,
plot = fig,
width = 6, # Fixed width from previous examples
height = 2, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
message(paste0("Plot saved as '", fname, "'"))
return(fname) # Return the full path of the saved file
}
# add snippet of code to save out csv
plot_indicator_time_series(
data = opt_duration_indicator,
value_col = "duration",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "haddock_pred",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
filter(Year%in% c(1983:2024)
View(haddock_predation_index)
View(haddock_predation_index)
# Provided by Micah dean (MADMF)
haddock_predation_index <-  read.csv('01_inputs/haddock_eat_herring_eggs_index.csv') %>%
dplyr::rename(Year=YEAR,
haddock_pred=log_est) %>%
filter(Year>=1983)
View(haddock_predation_index)
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "haddock_pred",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "haddock_pred",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1983, 2024))
# Analyses ----
# Plot and save output
plot_indicator_time_series(
data = haddock_predation_index,
value_col = "haddock_pred",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Calculate the mean NAO index for each winter year
winter_avg_nao <- nao_winter %>%
group_by(Winter_Year) %>%
summarise(Winter_NAO_Average = mean(NAO_Index, na.rm = TRUE))%>%
filter(Year>=1983)
# Create a 'winter_year' column to group the winter months correctly
# December (12) will be assigned to the *next* year for winter averaging.
nao_winter <- nao_data %>%
mutate(Winter_Year = ifelse(Month == 12, Year + 1, Year)) %>%
# Filter for the winter months: December (of previous year), January, February, March
filter(Month %in% c(12, 1, 2, 3))
# Downloaded monthly NAO from climate.gov
nao_data <- read.table("01_inputs/norm.nao.monthly.b5001.current.ascii.txt",
col.names = c("Year", "Month", "NAO_Index"))
# Create a 'winter_year' column to group the winter months correctly
# December (12) will be assigned to the *next* year for winter averaging.
nao_winter <- nao_data %>%
mutate(Winter_Year = ifelse(Month == 12, Year + 1, Year)) %>%
# Filter for the winter months: December (of previous year), January, February, March
filter(Month %in% c(12, 1, 2, 3))
# Calculate the mean NAO index for each winter year
winter_avg_nao <- nao_winter %>%
group_by(Winter_Year) %>%
summarise(Winter_NAO_Average = mean(NAO_Index, na.rm = TRUE))%>%
filter(Year>=1983)
View(nao_winter)
View(nao_winter)
# Calculate the mean NAO index for each winter year
winter_avg_nao <- nao_winter %>%
group_by(Winter_Year) %>%
summarise(Winter_NAO_Average = mean(NAO_Index, na.rm = TRUE))%>%
filter(Winter_Year>=1983)
View(winter_avg_nao)
rename(Winter_Year=Year)
rename(Year=Winter_Year)
# Create a 'winter_year' column to group the winter months correctly
# December (12) will be assigned to the *next* year for winter averaging.
nao_winter <- nao_data %>%
mutate(Winter_Year = ifelse(Month == 12, Year + 1, Year)) %>%
# Filter for the winter months: December (of previous year), January, February, March
filter(Month %in% c(12, 1, 2, 3))
# Calculate the mean NAO index for each winter year
winter_avg_nao <- nao_winter %>%
group_by(Winter_Year) %>%
summarise(Winter_NAO_Average = mean(NAO_Index, na.rm = TRUE))%>%
filter(Winter_Year>=1983))%>%
# Calculate the mean NAO index for each winter year
winter_avg_nao <- nao_winter %>%
group_by(Winter_Year) %>%
summarise(Winter_NAO_Average = mean(NAO_Index, na.rm = TRUE))%>%
filter(Winter_Year>=1983)%>%
rename(Year=Winter_Year)
View(winter_avg_nao)
# Save output
# need to update the year range
plot_indicator_time_series(
data = winter_avg_nao,
value_col = "Winter_NAO_Average",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Calculate the mean NAO index for each winter year
winter_avg_nao <- nao_winter %>%
group_by(Winter_Year) %>%
summarise(Winter_NAO = mean(NAO_Index, na.rm = TRUE))%>%
filter(Winter_Year>=1983)%>%
rename(Year=Winter_Year)
# Save output
# need to update the year range
plot_indicator_time_series(
data = winter_avg_nao,
value_col = "Winter_NAO_Average",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
# Save output
# need to update the year range
plot_indicator_time_series(
data = winter_avg_nao,
value_col = "Winter_NAO",
plot_title = "",
y_label = "",
x_label = "",
img_dir = "02_intermediates",
x_axis_limits = c(1980, 2025))
