}
# Loop through each indicator and display its corresponding plot
for (i in 1:6) {
img_dir = here::here("05_images")
short_name <- paste0(unique_indicators[i], "_",Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
# Construct an alternative filename for "millions" case
millions_fname <- paste(img_dir, short_name, "_millions_", Sys.Date(),  ".png")
# Check for the primary filename, if it doesn't exist, check for the "millions" version
if (file.exists(fname)) {
knitr::include_graphics(fname)
} else if (file.exists(millions_fname)) {
knitr::include_graphics(millions_fname)
} else {
cat(paste0("Plot for '", ind_name, "' not found at either path."))
}
cat("\n\n") # Add space after each plot
}
millions_fname <- paste(img_dir, millions_name, sep = "/")
# Loop through each indicator and display its corresponding plot
for (i in 1:6) {
img_dir = here::here("05_images")
short_name <- paste0(unique_indicators[i], "_",Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
# Construct an alternative filename for "millions" case
millions_name <- paste0(unique_indicators[i], "_millions_", Sys.Date(),  ".png")
millions_fname <- paste(img_dir, millions_name, sep = "/")
# Check for the primary filename, if it doesn't exist, check for the "millions" version
if (file.exists(fname)) {
knitr::include_graphics(fname)
} else if (file.exists(millions_fname)) {
knitr::include_graphics(millions_fname)
} else {
cat(paste0("Plot for '", ind_name, "' not found at either path."))
}
cat("\n\n") # Add space after each plot
}
# Loop through each indicator and display its corresponding plot
for (i in 1:6) {
img_dir = here::here("05_images")
short_name <- paste0(unique_indicators[i], "_",Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
# Construct an alternative filename for "millions" case
millions_name <- paste0(unique_indicators[i], "_millions_", Sys.Date(),  ".png")
millions_fname <- paste(img_dir, millions_name, sep = "/")
# Check for the primary filename, if it doesn't exist, check for the "millions" version
if (file.exists(fname)) {
knitr::include_graphics(fname)
} else if (file.exists(millions_fname)) {
knitr::include_graphics(millions_fname)
} else {
cat(paste0("Plot for '", ind_name, "' not found at either path."))
}
# Create a clean title for the plot heading
clean_title <- gsub("_", " ", ind_name)
# Display the plot with a markdown heading
cat(paste0("\n### ", tools::toTitleCase(clean_title), "\n\n"))
knitr::include_graphics(plot_path)
cat("\n\n") # Add space after each plot
}
short_name <- paste0(unique_indicators[i], "_",Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
knitr::include_graphics(fname)
short_name <- paste0(unique_indicators[1], "_",Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
knitr::include_graphics(fname)
short_name <- paste0(unique_indicators[2], "_",Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
knitr::include_graphics(fname)
# Use a for loop to iterate over each unique indicator
for (ind_name in unique_indicators) {
# Call the plt_herring function for the current indicator
plt_herring(
data = com_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025
)
}
```
# Use a for loop to iterate over each unique indicator
for (ind_name in unique_indicators) {
# Call the plt_herring function for the current indicator
plt_herring(
data = com_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025
)
}
```
# Use a for loop to iterate over each unique indicator
for (ind_name in unique_indicators) {
# Call the plt_herring function for the current indicator
plt_herring(
data = com_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025
)
}
```
plt_herring <- function(
data,
ind_name, # indicator name to filter by, will also be part of the file name
new_breaks = NA,
img_dir,
years = 1989:2025
) {
this_dat <- data |>
dplyr::filter(stringr::str_detect(INDICATOR_NAME, ind_name))
this_dat <- this_dat |>
# add NA for missing years
dplyr::full_join(expand.grid(
YEAR = years,
INDICATOR_NAME = unique(this_dat$INDICATOR_NAME)
)) |>
dplyr::arrange(YEAR)
short_name <- paste0(ind_name, "_", Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
if (max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(
DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE / 10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions")
)
fname <- paste(
img_dir,
paste0(ind_name, "_millions_", Sys.Date(), ".png"),
sep = "/"
)
}
# print(fname)
fig <- NEesp2::plt_indicator(this_dat, include_trends = FALSE) +
ggplot2::xlim(c(min(years), max(years))) +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 30, hjust = 1),
plot.background = ggplot2::element_rect(
fill = "transparent",
color = "transparent"
)
)
if (!is.na(new_breaks[1])) {
fig <- fig +
ggplot2::scale_x_continuous(breaks = new_breaks)
} else {
fig <- fig +
ggplot2::scale_x_continuous(
breaks = c(1980, 1990, 2000, 2010, 2020, 2025)
)
}
ggplot2::ggsave(fname, width = 6, height = 2)
return(short_name)
return(fig)
}
plt_herring(com_dat, ind_name = unique_indicators[1], img_dir=here::here("05_images"))
print(fig)
plt_herring <- function(
data,
ind_name, # indicator name to filter by, will also be part of the file name
new_breaks = NA,
img_dir,
years = 1989:2025
) {
this_dat <- data |>
dplyr::filter(stringr::str_detect(INDICATOR_NAME, ind_name))
this_dat <- this_dat |>
# add NA for missing years
dplyr::full_join(expand.grid(
YEAR = years,
INDICATOR_NAME = unique(this_dat$INDICATOR_NAME)
)) |>
dplyr::arrange(YEAR)
short_name <- paste0(ind_name, "_", Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
if (max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(
DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE / 10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions")
)
fname <- paste(
img_dir,
paste0(ind_name, "_millions_", Sys.Date(), ".png"),
sep = "/"
)
}
# print(fname)
fig <- NEesp2::plt_indicator(this_dat, include_trends = FALSE) +
ggplot2::xlim(c(min(years), max(years))) +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 30, hjust = 1),
plot.background = ggplot2::element_rect(
fill = "transparent",
color = "transparent"
)
)
if (!is.na(new_breaks[1])) {
fig <- fig +
ggplot2::scale_x_continuous(breaks = new_breaks)
} else {
fig <- fig +
ggplot2::scale_x_continuous(
breaks = c(1980, 1990, 2000, 2010, 2020, 2025)
)
}
ggplot2::ggsave(fname, width = 6, height = 2)
return(short_name)
print(fig)
}
plt_herring(com_dat, ind_name = unique_indicators[1], img_dir=here::here("05_images"))
plt_herring <- function(
data,
ind_name, # indicator name to filter by, will also be part of the file name
new_breaks = NA,
img_dir,
years = 1989:2025,
show_plot = FALSE
) {
this_dat <- data |>
dplyr::filter(stringr::str_detect(INDICATOR_NAME, ind_name))
this_dat <- this_dat |>
# add NA for missing years
dplyr::full_join(expand.grid(
YEAR = years,
INDICATOR_NAME = unique(this_dat$INDICATOR_NAME)
)) |>
dplyr::arrange(YEAR)
short_name <- paste0(ind_name, "_", Sys.Date(), ".png")
fname <- paste(img_dir, short_name, sep = "/")
if (max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(
DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE / 10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions")
)
fname <- paste(
img_dir,
paste0(ind_name, "_millions_", Sys.Date(), ".png"),
sep = "/"
)
}
# print(fname)
fig <- NEesp2::plt_indicator(this_dat, include_trends = FALSE) +
ggplot2::xlim(c(min(years), max(years))) +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 30, hjust = 1),
plot.background = ggplot2::element_rect(
fill = "transparent",
color = "transparent"
)
)
if (!is.na(new_breaks[1])) {
fig <- fig +
ggplot2::scale_x_continuous(breaks = new_breaks)
} else {
fig <- fig +
ggplot2::scale_x_continuous(
breaks = c(1980, 1990, 2000, 2010, 2020, 2025)
)
}
ggplot2::ggsave(fname, width = 6, height = 2)
if (show_plot) {
print(fig)
}
return(short_name)
}
plt_herring(com_dat, ind_name = unique_indicators[1], img_dir=here::here("05_images"),show_plot = T)
# Set global knitr options
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Load libraries
library(knitr)
library(ggplot2)
library(stringr)
library(here)
clean_title <- gsub("_", " ", ind_name)
cat(paste0("\n### ", tools::toTitleCase(clean_title), "\n\n"))
knitr::opts_chunk$set(echo = TRUE)
# Load and clean the data
herr_comm_dat <- read.csv(here::here("01_inputs/SOCIEOECONOMIC_COMMERCIAL_INDICATORS_FINAL.csv"), header = T) %>%
dplyr::mutate(
INDICATOR_NAME = dplyr::case_when(
str_detect(INDICATOR_NAME, "Commercial_HERRING_Landings_LBS") ~ "Commercial Landings",
str_detect(INDICATOR_NAME, "TOTALANNUALREV_HERRING_2024Dols") ~ "Total Commercial Revenue",
str_detect(INDICATOR_NAME, "AVGVESREVperYr_HERRING_2024_DOLlb") ~ "Vessel Revenue per Year",
str_detect(INDICATOR_NAME, "N_Commercial_Vessels_Landing_HERRING") ~ "Active Vessels",
str_detect(INDICATOR_NAME, "AVGPRICE_HERRING_2024_DOLlb") ~ "Price per Pound",
str_detect(INDICATOR_NAME, "AVGANNUAL_DIESEL_PRICE2024dols") ~ "Fuel Price",
TRUE ~ INDICATOR_NAME # Keep original if no match
)
)
# Get the new, clean list of unique indicator names
unique_indicators_clean <- unique(herr_comm_dat$INDICATOR_NAME)
# Create a plot using the clean data. This assumes plt_herring is accessible.
plot_path <- plt_herring(
data = com_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025,
show_plot = F
)
cat(paste0("\n### ", ind_name, "\n\n"))
herr_comm_dat <- read.csv(here::here("01_inputs/SOCIEOECONOMIC_COMMERCIAL_INDICATORS_FINAL.csv"), header = T) %>%
dplyr::mutate(
INDICATOR_NAME = dplyr::case_when(
str_detect(INDICATOR_NAME, "Commercial_HERRING_Landings_LBS") ~ "Commercial Landings",
str_detect(INDICATOR_NAME, "TOTALANNUALREV_HERRING_2024Dols") ~ "Total Commercial Revenue",
str_detect(INDICATOR_NAME, "AVGVESREVperYr_HERRING_2024_DOLlb") ~ "Vessel Revenue per Year",
str_detect(INDICATOR_NAME, "N_Commercial_Vessels_Landing_HERRING") ~ "Active Vessels",
str_detect(INDICATOR_NAME, "AVGPRICE_HERRING_2024_DOLlb") ~ "Price per Pound",
str_detect(INDICATOR_NAME, "AVGANNUAL_DIESEL_PRICE2024dols") ~ "Fuel Price",
TRUE ~ INDICATOR_NAME # Keep original if no match
)
)
# Get the new, clean list of unique indicator names
unique_indicators_clean <- unique(herr_comm_dat$INDICATOR_NAME)
# Loop through the new indicator names and display the plot
for (ind_name in unique_indicators_clean) {
# Create a plot using the clean data. This assumes plt_herring is accessible.
plot_path <- plt_herring(
data = herr_comm_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025,
show_plot = F
)
cat(paste0("\n### ", ind_name, "\n\n"))
# Loop through the new indicator names and display the plot
for (ind_name in unique_indicators_clean) {
# Create a plot using the clean data. This assumes plt_herring is accessible.
plot_path <- plt_herring(
data = herr_comm_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025,
show_plot = F
)
}
for (ind_name in unique_indicators_clean) {
# Create a plot using the clean data. This assumes plt_herring is accessible.
plot_path <- plt_herring(
data = herr_comm_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025,
show_plot = F
)
}
# Display the plot with the new, simplified title
cat(paste0("\n### ", ind_name, "\n\n"))
]
for (ind_name in unique_indicators_clean) {
# Create a plot using the clean data. This assumes plt_herring is accessible.
plot_path <- plt_herring(
data = herr_comm_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025,
show_plot = F
)
}
cat(paste0("\n### ", ind_name, "\n\n"))
# Set global knitr options
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Load libraries
library(knitr)
library(ggplot2)
library(dplyr)
library(stringr)
plot_path_millions
getwd()
getwd()
img_dir
unique_indicators_clean
herr_comm_dat <- read.csv(here::here("01_inputs/SOCIEOECONOMIC_COMMERCIAL_INDICATORS_FINAL.csv"), header = T) %>%
dplyr::mutate(
INDICATOR_NAME = dplyr::case_when(
str_detect(INDICATOR_NAME, "Commercial_HERRING_Landings_LBS") ~ "Commercial_Landings",
str_detect(INDICATOR_NAME, "TOTALANNUALREV_HERRING_2024Dols") ~ "Total_Commercial_Revenue",
str_detect(INDICATOR_NAME, "AVGVESREVperYr_HERRING_2024_DOLlb") ~ "Vessel_Revenue_per_Year",
str_detect(INDICATOR_NAME, "N_Commercial_Vessels_Landing_HERRING") ~ "Active_Vessels",
str_detect(INDICATOR_NAME, "AVGPRICE_HERRING_2024_DOLlb") ~ "Price_per_Pound",
str_detect(INDICATOR_NAME, "AVGANNUAL_DIESEL_PRICE2024dols") ~ "Fuel_Price",
TRUE ~ INDICATOR_NAME # Keep original if no match
)
)
View(herr_comm_dat)
# Get the new, clean list of unique indicator names
unique_indicators_clean <- unique(herr_comm_dat$INDICATOR_NAME)
plot_path
cat(paste0("\n### ", ind_name, "\n\n"))
ind_name
# Get the new, clean list of unique indicator names
unique_indicators_clean <- unique(herr_comm_dat$INDICATOR_NAME)
for (ind_name in unique_indicators_clean) {
# Create a plot using the clean data. This assumes plt_herring is accessible.
plot_path <- plt_herring(
data = herr_comm_dat,
ind_name = ind_name,
img_dir = here::here("05_images"),
years = 1989:2025,
show_plot = F
)
# Display the plot with the new, simplified title
cat(paste0("\n### ", ind_name, "\n\n"))
# Check for millions filename as a fallback
plot_path_millions <- here::here("05_images", paste0(ind_name, "_millions_", Sys.Date(), ".png"))
if (file.exists(plot_path)) {
knitr::include_graphics(plot_path)
} else if (file.exists(plot_path_millions)) {
knitr::include_graphics(plot_path_millions)
} else {
cat("Error: Plot file not found.")
}
cat("\n\n") # Add space after each plot
}
plot_path
# Set global knitr options
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# ok this works just have to have it save the plots to the same place as the markdown doc is in
# add option to include titles
# Load libraries
library(knitr)
library(ggplot2)
library(dplyr)
library(stringr)
cat(paste0("\n### ", ind_name, "\n\n"))
plt <- NEesp2::plot_condition(data=condition_data, var = "Atlantic herring")
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
aspect.ratio = 1/4,
legend.title = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 12), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
#aspect.ratio = 1/4,
legend.title = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 12), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
plt +
ggplot2::geom_point(ggplot2::aes(shape = EPU), size = 2) +
ggplot2::guides(
shape = ggplot2::guide_legend(title = "EPU"),
color = ggplot2::guide_legend(ncol = 1) # Force color legend to be a single column to stack
) +
ggplot2::theme(
#aspect.ratio = 1/4,
legend.title = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size = 16),
legend.background = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 12), # Make legend text smaller
legend.box = "vertical", # Stack legends vertically
legend.spacing.y = ggplot2::unit(0.000001, "cm"), # Adjust this value to reduce space
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2))+
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
#width = 16, # Fixed width from previous examples
#height = 9, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
width = 16, # Fixed width from previous examples
height = 9, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
ggplot2::ggsave(here::here("05_images/new_condition.png"),
#plot = fig,
#width = 16, # Fixed width from previous examples
#height = 9, # Fixed height from previous examples for non-faceted plot
bg = "transparent") # Ensure transparent background for saved file
